using Arc4u.OAuth2.Token;
using Arc4u.Serializer;
using FluentAssertions;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;

namespace Arc4u.Standard.UnitTest.Serialization
{
    public class CompressionAndSpeedTests
    {
        /// <summary>
        /// A normal and a "zuppafat" bearer token
        /// </summary>
        private static readonly string[] _bearerTokens =
        {
            "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjJLdGtudlhUUzIwRFBYT1ZITHQzOHJFcm5XMCIsImtpZCI6IjJLdGtudlhUUzIwRFBYT1ZITHQzOHJFcm5XMCJ9..ILS3bFXMCPoXHzQGNHyq4bpC0Z4cAQUiZPyG-ozS_eI8pyVSXEOUEH61rCz79_SWtvJPVgsFNjZUNLI0zwp95jshZXBkjfd149NTcuRJvU59gkOat7i6ol7mZ1I694n8qBctkn5p0ZaqxSyCaCq7jnjjMnKshDFwgbUqOfNPIWffi1_xsnXWDxhc3xfuhMh_Xyjg3sd9274lRQ1AF2uFy93VIXaKpCSMhrDLCJcj0Q16dRQDhckwF4pNv3kmbgZVoFFlsF_ihhgJ-0osuPZQcSJgnYhNmRA6fY-jqJ-bw940XI4Zzt5hkjE7Ps89z20zxJ9DkINh3AQWp3Fp4aWz5Q",
            "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkVBYURSMHRZVU5OWWZCSmotRHpucnNyakxyRSIsImtpZCI6IkVBYURSMHRZVU5OWWZCSmotRHpucnNyakxyRSJ9.eyJhdWQiOiJodHRwczovL3BydC50ZXN0Lmhvc3QiLCJpc3MiOiJodHRwOi8vYWRmc3Rlc3QuYmVsZ3JpZC5uZXQvYWRmcy9zZXJ2aWNlcy90cnVzdCIsImlhdCI6MTY2NjA3NDgzNiwibmJmIjoxNjY2MDc0ODM2LCJleHAiOjE2NjYxMTA4MzYsImh0dHA6Ly9zY2hlbWFzLmFyYzR1Lm5ldC93cy8yMDEyLzA1L2lkZW50aXR5L2NsYWltcy9jdWx0dXJlIjoibmwtTkwiLCJnaXZlbl9uYW1lIjoiVmluY2VudCIsImZhbWlseV9uYW1lIjoiVmFuIERlbiBCZXJnaGUiLCJlbWFpbCI6IlZpbmNlbnQuVmFuRGVuQmVyZ2hlQGVsaWEuYmUiLCJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9ob21lcGhvbmUiOiIiLCJodHRwOi8vc2NoZW1hcy5hcmM0dS5uZXQvd3MvMjAxMi8wNS9pZGVudGl0eS9jbGFpbXMvY29tcGFueSI6IkVsaWEiLCJodHRwOi8vc2NoZW1hcy5hcmM0dS5uZXQvd3MvMjAxMi8wNS9pZGVudGl0eS9jbGFpbXMvc2lkIjoiUy0xLTktMjEtMjEzNzE0Mzk1OS0xODc2NjkzNTA2LTI1ODAzOTg1NjMtODMxODQiLCJ1cG4iOiJWVjAwMDZAQmVsZ3JpZC5uZXQiLCJ3aW5hY2NvdW50bmFtZSI6IlZWMDAwNiIsInByaW1hcnlzaWQiOiJTLTEtNS0yMS0yMTM3MTQzOTU5LTE4NzY2OTM1MDYtMjU4MDM5ODU2My04MzE4NCIsImh0dHA6Ly9zY2hlbWFzLmFyYzR1Lm5ldC93cy8yMDEyLzA1L2lkZW50aXR5L2NsYWltcy9hdXRob3JpemF0aW9uIjoie1wiQWxsT3BlcmF0aW9uc1wiOlt7XCJJRFwiOjEsXCJOYW1lXCI6XCJBY2Nlc3NBcHBsaWNhdGlvblwifSx7XCJJRFwiOjIsXCJOYW1lXCI6XCJDYW5NYW5hZ2VTZXJ2ZXJMb2dnaW5nTGV2ZWxcIn0se1wiSURcIjozLFwiTmFtZVwiOlwiQ2FuU2VlU3dhZ2dlckZhY2FkZUFwaVwifSx7XCJJRFwiOjcsXCJOYW1lXCI6XCJEZWFjdGl2YXRlUGFyY2VsXCJ9LHtcIklEXCI6OCxcIk5hbWVcIjpcIkRlbGV0ZVBhcmNlbFwifSx7XCJJRFwiOjUsXCJOYW1lXCI6XCJFeHBvcnRQYXJjZWxEYXRhXCJ9LHtcIklEXCI6NixcIk5hbWVcIjpcIkltcG9ydENhZGFzdGVySW5mb1wifSx7XCJJRFwiOjQsXCJOYW1lXCI6XCJNYW5hZ2VQYXJjZWxcIn1dLFwiT3BlcmF0aW9uc1wiOlt7XCJPcGVyYXRpb25zXCI6WzEsMiwzLDQsNSw2LDcsOF0sXCJTY29wZVwiOlwiXCJ9XSxcIlJvbGVzXCI6W3tcIlJvbGVzXCI6W1wiQWRtaW5cIl0sXCJTY29wZVwiOlwiXCJ9XSxcIlNjb3Blc1wiOltcIlwiXX0iLCJodHRwOi8vc2NoZW1hcy5hcmM0dS5uZXQvd3MvMjAxMi8wNS9pZGVudGl0eS9jbGFpbXMvc2VydmljZXNpZCI6IlMtMS01LTIxLTIxMzcxNDM5NTktMTg3NjY5MzUwNi0yNTgwMzk4NTYzLTEwNTM0NiIsImFwcHR5cGUiOiJQdWJsaWMiLCJhcHBpZCI6ImI3NGI5NTI5LWQ4NmEtNGNhYS1hYTExLTEyYzM3NGEyYWFmYSIsImF1dGhtZXRob2QiOiJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvYXV0aGVudGljYXRpb25tZXRob2Qvd2luZG93cyIsImF1dGhfdGltZSI6IjIwMjItMTAtMThUMDY6MzM6NTYuMTU5WiIsInZlciI6IjEuMCIsInNjcCI6InVzZXJfaW1wZXJzb25hdGlvbiBvcGVuaWQifQ.LHBdN1W5i3GZlEwEudIpa36IsgE_5P8VYGcsFSWuQdntuEVwhmujyH8tGogXW_kzEFHZFfdzspNY4umiBEtUp5m5u9ZULT1mPcaHywsVM0337EApFdwzFbRn1JFwNc2gMFxOiJJEadBMveGR7LWATvYNGlB0B9RFXka28pfiHU9KEbvXEXv6MfGIYNNQ60rW-ekTkE7M-jEQ7rb7VeE_VlaXfFLtAbuaeqB19tji2M6qsDYqMDhlVlMAZxzMDxCvRp6xiZoLhJOoadwm2X9mcY-bKrgVU-K2Eczmqzi1FPFR4ss9Y6WNOD_QdawWC57g372ezVgI8cl_vHgRY15ZCw"
        };

        private static readonly JwtSecurityToken _jwt = new JwtSecurityToken("issuer", "audience", new List<Claim> { new Claim("key", "value") }, notBefore: DateTime.UtcNow.AddHours(-1), expires: DateTime.UtcNow.AddMinutes(-10));

        private static readonly TokenInfo _tokenInfo = new TokenInfo("Bearer", _jwt.EncodedPayload, _jwt.EncodedHeader, DateTime.UtcNow);

        private sealed class Measurement
        {
            public string Method { get; set; }
            public TimeSpan TimeSpan { get; set; } 
            public int Size { get; set; }
        }

        private readonly ITestOutputHelper _output;

        public CompressionAndSpeedTests(ITestOutputHelper output)
        {
            _output = output;
        }

        private static Measurement Measure(IObjectSerialization objectSerialization, string method)
        {
            var sw = Stopwatch.StartNew();
            int size = 0;
            for (int iterations = 0; iterations < 10000; ++iterations)
            {
                size = 0;

                foreach (var bearerToken in _bearerTokens)
                {
                    var data = objectSerialization.Serialize(bearerToken);
                    size += data.Length;
                    // this measures time only, it's not a test of correctness in this context.
                    objectSerialization.Deserialize<string>(data);                    
                }

                {
                    var data = objectSerialization.Serialize(_tokenInfo);
                    size += data.Length;
                    objectSerialization.Deserialize<TokenInfo>(data);
                }

                // add other relevant cases here.
            }
            sw.Stop();
            return new Measurement { Method = method, TimeSpan = sw.Elapsed, Size = size };
        }

        private void ShowMeasurements(IEnumerable<Measurement> measurements, string title)
        {
            _output.WriteLine(title);
            _output.WriteLine("Method\tTime\tSize");
            foreach (var measurement in measurements)
                _output.WriteLine($"{measurement.Method}\t{measurement.TimeSpan}\t{measurement.Size}");
            _output.WriteLine("");
        }

        /// <summary>
        /// Measure response 
        /// </summary>
        [Fact]
        public void CheckRuntimeTypeModelConcurrencyAsync()
        {
            // arrange
            var protoBufSerialization = new ProtoBufSerialization();
            var protoBufZipSerialization = new ProtoBufZipSerialization();
            var oldJsonSerialization = new JsonSerialization();
            var newJsonSerialization = new JsonSerialization2();
            var jsonCompressedSerialization = new JsonSerialization2(compressed: true);

            // act
            var list = new List<Measurement>();
            list.Add(Measure(protoBufSerialization, "Protobuf"));
            list.Add(Measure(protoBufZipSerialization, "ProtobufZip"));
            list.Add(Measure(oldJsonSerialization, "JsonSerialization"));
            list.Add(Measure(newJsonSerialization, "JsonSerialization2(compressed : false)"));
            list.Add(Measure(jsonCompressedSerialization, "JsonSerialization2(compressed: true)"));

            // sort by fastest compression
            list.Sort((item1, item2) => item1.TimeSpan.CompareTo(item2.TimeSpan));
            ShowMeasurements(list, "Results ordered by ascending serialization speed");
            // sort by smallest size
            list.Sort((item1, item2) => item1.Size.CompareTo(item2.Size));
            ShowMeasurements(list, "Results ordered by ascending serialization size");
        }
    }
}
